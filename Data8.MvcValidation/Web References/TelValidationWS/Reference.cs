//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Data8.MvcValidation.TelValidationWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InternationalTelephoneValidationSoap", Namespace="http://www.data-8.co.uk/integr8")]
    public partial class InternationalTelephoneValidation : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsValidSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InternationalTelephoneValidation() {
            this.Url = global::Data8.MvcValidation.Properties.Settings.Default.Data8_MvcValidation_TelValidationWS_InternationalTelephoneValidation;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsValidSimpleCompletedEventHandler IsValidSimpleCompleted;
        
        /// <remarks/>
        public event IsValidCompletedEventHandler IsValidCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.data-8.co.uk/integr8/IsValidSimple", RequestNamespace="http://www.data-8.co.uk/integr8", ResponseNamespace="http://www.data-8.co.uk/integr8", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InternationalTelephoneValidationOutput IsValidSimple(string username, string password, string telephoneNumber, string defaultCountry) {
            object[] results = this.Invoke("IsValidSimple", new object[] {
                        username,
                        password,
                        telephoneNumber,
                        defaultCountry});
            return ((InternationalTelephoneValidationOutput)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidSimpleAsync(string username, string password, string telephoneNumber, string defaultCountry) {
            this.IsValidSimpleAsync(username, password, telephoneNumber, defaultCountry, null);
        }
        
        /// <remarks/>
        public void IsValidSimpleAsync(string username, string password, string telephoneNumber, string defaultCountry, object userState) {
            if ((this.IsValidSimpleOperationCompleted == null)) {
                this.IsValidSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidSimpleOperationCompleted);
            }
            this.InvokeAsync("IsValidSimple", new object[] {
                        username,
                        password,
                        telephoneNumber,
                        defaultCountry}, this.IsValidSimpleOperationCompleted, userState);
        }
        
        private void OnIsValidSimpleOperationCompleted(object arg) {
            if ((this.IsValidSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidSimpleCompleted(this, new IsValidSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.data-8.co.uk/integr8/IsValid", RequestNamespace="http://www.data-8.co.uk/integr8", ResponseNamespace="http://www.data-8.co.uk/integr8", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InternationalTelephoneValidationOutput IsValid(string username, string password, string telephoneNumber, string defaultCountry, Option[] options) {
            object[] results = this.Invoke("IsValid", new object[] {
                        username,
                        password,
                        telephoneNumber,
                        defaultCountry,
                        options});
            return ((InternationalTelephoneValidationOutput)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidAsync(string username, string password, string telephoneNumber, string defaultCountry, Option[] options) {
            this.IsValidAsync(username, password, telephoneNumber, defaultCountry, options, null);
        }
        
        /// <remarks/>
        public void IsValidAsync(string username, string password, string telephoneNumber, string defaultCountry, Option[] options, object userState) {
            if ((this.IsValidOperationCompleted == null)) {
                this.IsValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidOperationCompleted);
            }
            this.InvokeAsync("IsValid", new object[] {
                        username,
                        password,
                        telephoneNumber,
                        defaultCountry,
                        options}, this.IsValidOperationCompleted, userState);
        }
        
        private void OnIsValidOperationCompleted(object arg) {
            if ((this.IsValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidCompleted(this, new IsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public partial class InternationalTelephoneValidationOutput {
        
        private Status statusField;
        
        private TelephoneNumberDetails resultField;
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public TelephoneNumberDetails Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public partial class Status {
        
        private bool successField;
        
        private string errorMessageField;
        
        private float creditsRemainingField;
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public float CreditsRemaining {
            get {
                return this.creditsRemainingField;
            }
            set {
                this.creditsRemainingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public partial class Option {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public partial class TelephoneNumberDetails {
        
        private string telephoneNumberField;
        
        private ValidationResult validationResultField;
        
        private ValidationLevel validationLevelField;
        
        private NumberType numberTypeField;
        
        private string locationField;
        
        private string providerField;
        
        private string countryCodeField;
        
        private string countryNameField;
        
        /// <remarks/>
        public string TelephoneNumber {
            get {
                return this.telephoneNumberField;
            }
            set {
                this.telephoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public ValidationResult ValidationResult {
            get {
                return this.validationResultField;
            }
            set {
                this.validationResultField = value;
            }
        }
        
        /// <remarks/>
        public ValidationLevel ValidationLevel {
            get {
                return this.validationLevelField;
            }
            set {
                this.validationLevelField = value;
            }
        }
        
        /// <remarks/>
        public NumberType NumberType {
            get {
                return this.numberTypeField;
            }
            set {
                this.numberTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string Provider {
            get {
                return this.providerField;
            }
            set {
                this.providerField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public enum ValidationResult {
        
        /// <remarks/>
        Valid,
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        NoCoverage,
        
        /// <remarks/>
        Unavailable,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public enum ValidationLevel {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        STDCode,
        
        /// <remarks/>
        Exchange,
        
        /// <remarks/>
        FullNumber,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.data-8.co.uk/integr8")]
    public enum NumberType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Landline,
        
        /// <remarks/>
        Mobile,
        
        /// <remarks/>
        NonGeographic,
        
        /// <remarks/>
        Special,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IsValidSimpleCompletedEventHandler(object sender, IsValidSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InternationalTelephoneValidationOutput Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InternationalTelephoneValidationOutput)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IsValidCompletedEventHandler(object sender, IsValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InternationalTelephoneValidationOutput Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InternationalTelephoneValidationOutput)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591